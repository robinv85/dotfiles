# ==================================================================
#
# ~/.bash_prompt
#
# ==================================================================

# Check color mode and set to 256 colors
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

# Color definitions
if tput setaf 1 &> /dev/null; then
  tput sgr 0 0
  if [[ $(tput colors) -ge 256 ]] 2</dev/null; then
    RED=$(tput setaf 124)
    GREEN=$(tput setaf 76)
    BLUE=$(tput setaf 33)
    CYAN=$(tput setaf 37)
    MAGENTA=$(tput setaf 125)
    YELLOW=$(tput setaf 190)
    WHITE=$(tput setaf 7)
    ORANGE=$(tput setaf 136)
  else
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    BLUE=$(tput setaf 4)
    CYAN=$(tput setaf 6)
    MAGENTA=$(tput setaf 5)
    YELLOW=$(tput setaf 3)
    WHITE=$(tput setaf 7)
fi
else
  GREEN="\033[1;32m"
  MAGENTA="\033[1;31m"
  WHITE="\033[1;37m"
  ORANGE="\033[;33m"
fi

export RED
export GREEN
export BLUE
export CYAN
export MAGENTA
export YELLOW
export WHITE
export ORANGE


# Git status information

is_git_repo() {
  git branch > /dev/null 2>&1
}

get_git_info() {
  git_status="$(git status 2> /dev/null)"
  if [[ ${git_status} =~ "working directory clean" ]]; then
    git_info_style="${GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    git_info_style="${YELLOW}"
  else
    git_info_style="${RED}"
  fi

  remote_pattern="# Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi

  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  branch_pattern="^# On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi
  git_info="${WHITE}on ${git_info_style}[${branch}]${remote}${WHITE}"

}

set_prompt_symbol() {
  if test $1 -eq 0 ; then
    prompt_symbol="${WHITE}\$"
  else
    prompt_symbol="${RED}\$${WHITE}"
  fi
}

# Customize Bash prompt
build_prompt()  {
  set_prompt_symbol $?
  username="${CYAN}\\u"
  at="${WHITE}@"
  host="${ORANGE}\\h"
  path="${BLUE}\\w"

  if is_git_repo ; then
   get_git_info
  else
    git_info=""
  fi

  PS1="\n $username$at$host${WHITE}: $path $git_info \n $prompt_symbol ${WHITE} "
}

PROMPT_COMMAND=build_prompt
