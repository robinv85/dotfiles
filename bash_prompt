# ==================================================================
#
# ~/.bash_prompt
#
# ==================================================================

# Check color mode and set to 256 colors
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

# Color definitions
if tput setaf 1 &> /dev/null; then
  tput sgr 0 0
  if [[ $(tput colors) -ge 256 ]] 2</dev/null; then
    red=$(tput setaf 124)
    green=$(tput setaf 76)
    blue=$(tput setaf 33)
    cyan=$(tput setaf 37)
    magenta=$(tput setaf 125)
    yellow=$(tput setaf 190)
    white=$(tput setaf 7)
    orange=$(tput setaf 136)
  else
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    blue=$(tput setaf 4)
    cyan=$(tput setaf 6)
    magenta=$(tput setaf 5)
    yellow=$(tput setaf 3)
    black=$(tput setaf 8)
    white=$(tput setaf 7)
fi
else
 green="\033[1;32m"
 magenta="\033[1;31m"
 white="\033[1;37m"
 orange="\033[;33m"
fi

# Git status information

is_git_repo() {
  git branch > /dev/null 2>&1
}

get_git_info() {

  git_status="$(git status 2> /dev/null)"
  if [[ ${git_status} =~ "working directory clean" ]]; then
    git_info_style="${green}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    git_info_style="${yellow}"
  else
    git_info_style="${red}"
  fi

  remote_pattern="# Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi

  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  branch_pattern="^# On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi
  git_info="${white}on ${git_info_style}[${branch}]${remote}${white}"

}

set_prompt_symbol() {
  if test $1 -eq 0 ; then
    prompt_symbol="${white}\$"
  else
    prompt_symbol="${red}\$${white}"
  fi
}

# Customize Bash prompt
build_prompt()  {
  set_prompt_symbol $?

  username="${cyan}\\u"
  at="${white}@"
  host="${orange}\\h"
  path="${blue}\\w"

  if is_git_repo ; then
   get_git_info
  else
    git_info=""
  fi

  PS1="\n $username$at$host${white}: $path $git_info \n $prompt_symbol ${white} "
}
build_prompt
